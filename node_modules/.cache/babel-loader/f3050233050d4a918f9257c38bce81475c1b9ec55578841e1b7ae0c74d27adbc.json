{"ast":null,"code":"import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';\nconst DInputSwitch = /*@__PURE__*/proxyCustomElement(class DInputSwitch extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.eventChange = createEvent(this, \"eventChange\", 7);\n    this.changeHandler = event => {\n      const value = event.target.checked;\n      this.internalIsChecked = value;\n      this.eventChange.emit(value);\n    };\n    this.label = undefined;\n    this.innerId = undefined;\n    this.name = undefined;\n    this.isChecked = undefined;\n    this.isDisabled = undefined;\n    this.isReadonly = undefined;\n    this.internalIsChecked = undefined;\n  }\n  watchIsCheckedHandler(newValue) {\n    this.internalIsChecked = newValue;\n  }\n  connectedCallback() {\n    this.internalIsChecked = this.isChecked;\n    if (this.isReadonly) {\n      this.el.onclick = () => false;\n    }\n  }\n  render() {\n    return h(\"div\", {\n      class: \"form-check form-switch\"\n    }, h(\"input\", {\n      id: this.innerId,\n      name: this.name,\n      onChange: this.changeHandler,\n      class: \"form-check-input\",\n      type: \"checkbox\",\n      role: \"switch\",\n      checked: this.internalIsChecked,\n      disabled: this.isDisabled\n    }), !!this.label && h(\"label\", {\n      class: \"form-check-label\",\n      htmlFor: this.innerId\n    }, this.label));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"isChecked\": [\"watchIsCheckedHandler\"]\n    };\n  }\n}, [0, \"d-input-switch\", {\n  \"label\": [1],\n  \"innerId\": [1, \"inner-id\"],\n  \"name\": [1],\n  \"isChecked\": [4, \"is-checked\"],\n  \"isDisabled\": [4, \"is-disabled\"],\n  \"isReadonly\": [4, \"is-readonly\"],\n  \"internalIsChecked\": [32]\n}]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"d-input-switch\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"d-input-switch\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, DInputSwitch);\n        }\n        break;\n    }\n  });\n}\nexport { DInputSwitch as D, defineCustomElement as d };","map":{"version":3,"names":["DInputSwitch","proxyCustomElement","HTMLElement","changeHandler","event","value","target","checked","internalIsChecked","eventChange","emit","watchIsCheckedHandler","newValue","connectedCallback","isChecked","isReadonly","el","onclick","render","h","class","id","innerId","name","onChange","type","role","disabled","isDisabled","label","htmlFor"],"sources":["/Users/felipemeyer/sites/bim/bim-historial-fideicomisos/node_modules/@dynamic-framework/ui/components/src/components/d-input-switch/d-input-switch.tsx"],"sourcesContent":["import {\n  Component,\n  h,\n  ComponentInterface,\n  Prop,\n  Event,\n  EventEmitter,\n  State,\n  Watch,\n  Element,\n} from '@stencil/core';\n\n@Component({ tag: 'd-input-switch' })\nexport class DInputSwitch implements ComponentInterface {\n  @Element() el!: HTMLDInputSwitchElement;\n\n  /**\n   * The text to display in the switch.\n   */\n  @Prop() label?: string;\n\n  /**\n   * Id\n   */\n  @Prop() innerId!: string;\n\n  /**\n   * Id\n   */\n  @Prop() name?: string;\n\n  /**\n   * Flag to change the check state\n   */\n  @Prop() isChecked?: boolean;\n\n  /**\n   * Flag to disable the input\n   */\n  @Prop() isDisabled?: boolean;\n\n  /**\n   * Flag to disable the onMChange event\n   */\n  @Prop() isReadonly?: boolean;\n\n  /**\n   * Emitted when the switch has changed\n   */\n  @Event() eventChange!: EventEmitter<boolean>;\n\n  @State() internalIsChecked?: boolean;\n\n  @Watch('isChecked')\n  watchIsCheckedHandler(newValue: boolean) {\n    this.internalIsChecked = newValue;\n  }\n\n  connectedCallback() {\n    this.internalIsChecked = this.isChecked;\n\n    if (this.isReadonly) {\n      this.el.onclick = () => false;\n    }\n  }\n\n  private changeHandler = (event: Event) => {\n    const value = (event.target as HTMLInputElement).checked;\n    this.internalIsChecked = value;\n    this.eventChange.emit(value);\n  };\n\n  render() {\n    return (\n      <div class=\"form-check form-switch\">\n        <input\n          id={this.innerId}\n          name={this.name}\n          onChange={this.changeHandler}\n          class=\"form-check-input\"\n          type=\"checkbox\"\n          role=\"switch\"\n          checked={this.internalIsChecked}\n          disabled={this.isDisabled}\n        />\n        {!!this.label && (\n          <label\n            class=\"form-check-label\"\n            htmlFor={this.innerId}\n          >\n            {this.label}\n          </label>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":";MAaaA,YAAY,gBAAAC,kBAAA,OAAAD,YAAA,SAAAE,WAAA;;;;;IAqDf,KAAAC,aAAa,GAAIC,KAAY;MACnC,MAAMC,KAAK,GAAID,KAAK,CAACE,MAA2B,CAACC,OAAO;MACxD,IAAI,CAACC,iBAAiB,GAAGH,KAAK;MAC9B,IAAI,CAACI,WAAW,CAACC,IAAI,CAACL,KAAK,CAAC;KAC7B;;;;;;;;;EAhBDM,qBAAqBA,CAACC,QAAiB;IACrC,IAAI,CAACJ,iBAAiB,GAAGI,QAAQ;;EAGnCC,iBAAiBA,CAAA;IACf,IAAI,CAACL,iBAAiB,GAAG,IAAI,CAACM,SAAS;IAEvC,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,IAAI,CAACC,EAAE,CAACC,OAAO,GAAG,MAAM,KAAK;;;EAUjCC,MAAMA,CAAA;IACJ,OACEC,CAAA;MAAKC,KAAK,EAAC;IAAwB,GACjCD,CAAA;MACEE,EAAE,EAAE,IAAI,CAACC,OAAO;MAChBC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,QAAQ,EAAE,IAAI,CAACrB,aAAa;MAC5BiB,KAAK,EAAC,kBAAkB;MACxBK,IAAI,EAAC,UAAU;MACfC,IAAI,EAAC,QAAQ;MACbnB,OAAO,EAAE,IAAI,CAACC,iBAAiB;MAC/BmB,QAAQ,EAAE,IAAI,CAACC;IAAU,EACzB,EACD,CAAC,CAAC,IAAI,CAACC,KAAK,IACXV,CAAA;MACEC,KAAK,EAAC,kBAAkB;MACxBU,OAAO,EAAE,IAAI,CAACR;IAAO,GAEpB,IAAI,CAACO,KAAK,CAEd,CACG"},"metadata":{},"sourceType":"module","externalDependencies":[]}