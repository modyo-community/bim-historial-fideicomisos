{"ast":null,"code":"import { r as registerInstance, c as createEvent, h } from './index-a19c3827.js';\nimport { c as currency_min } from './store-fc6c92fd.js';\nimport { P as PREFIX_BS } from './component-config-025f7932.js';\nconst DInputCurrencyBase = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.eventChange = createEvent(this, \"eventChange\", 7);\n    this.eventBlur = createEvent(this, \"eventBlur\", 7);\n    this.eventFocus = createEvent(this, \"eventFocus\", 7);\n    /**\n     * Emit input and select values when the values change\n     */\n    this.changeHandler = event => {\n      event.stopPropagation();\n      this.internalValueAsNumber = event.detail !== '' && typeof event.detail === 'string' ? parseFloat(event.detail) : undefined;\n      this.internalValueAsFormat = this.internalValueAsNumber !== undefined ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), {\n        symbol: ''\n      })).format() : '';\n      this.eventChange.emit(this.internalValueAsNumber);\n    };\n    this.blurHandler = event => {\n      event.stopPropagation();\n      this.internalType = 'text';\n      this.internalValueAsFormat = this.internalValueAsNumber !== undefined ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), {\n        symbol: ''\n      })).format() : '';\n      this.eventBlur.emit(this.internalValueAsNumber);\n    };\n    this.focusHandler = event => {\n      event.stopPropagation();\n      this.internalType = 'number';\n      this.internalValueAsFormat = this.internalValueAsNumber !== undefined ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), {\n        symbol: ''\n      })).format() : '';\n      this.eventFocus.emit(this.internalValueAsNumber);\n    };\n    this.wheelHandler = event => {\n      var _a;\n      event.stopPropagation();\n      (_a = this.htmlInput) === null || _a === void 0 ? void 0 : _a.innerBlur();\n    };\n    this.innerId = undefined;\n    this.name = undefined;\n    this.label = '';\n    this.labelIcon = undefined;\n    this.labelIconFamilyClass = undefined;\n    this.labelIconFamilyPrefix = undefined;\n    this.placeholder = '';\n    this.value = undefined;\n    this.isDisabled = false;\n    this.isReadOnly = false;\n    this.isLoading = false;\n    this.iconFamilyClass = undefined;\n    this.iconFamilyPrefix = undefined;\n    this.iconStart = undefined;\n    this.iconStartFamilyClass = undefined;\n    this.iconStartFamilyPrefix = undefined;\n    this.iconEnd = undefined;\n    this.iconEndFamilyClass = undefined;\n    this.iconEndFamilyPrefix = undefined;\n    this.hint = undefined;\n    this.isInvalid = false;\n    this.isValid = false;\n    this.minValue = undefined;\n    this.maxValue = undefined;\n    this.currencyOptions = undefined;\n    this.currencyCode = undefined;\n    this.internalValueAsNumber = undefined;\n    this.internalValueAsFormat = undefined;\n    this.internalType = 'text';\n    this.internalIsInvalid = false;\n  }\n  watchValueHandler(newValue) {\n    this.internalIsInvalid = !this.isValidValue(newValue);\n  }\n  isValidValue(value) {\n    if (value === undefined) {\n      return true;\n    }\n    if (this.internalType === 'number') {\n      return (this.minValue !== undefined ? value >= this.minValue : true) && (this.maxValue !== undefined ? value <= this.maxValue : true);\n    }\n    return true;\n  }\n  valueAsType() {\n    if (this.internalType === 'number') {\n      return this.internalValueAsNumber;\n    }\n    return this.internalValueAsFormat;\n  }\n  connectedCallback() {\n    this.internalValueAsNumber = this.value;\n  }\n  componentDidLoad() {\n    this.internalType = 'text';\n    this.internalValueAsFormat = this.internalValueAsNumber !== undefined ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), {\n      symbol: ''\n    })).format() : '';\n  }\n  // eslint-disable-next-line class-methods-use-this\n  generateStyleVariables() {\n    return {\n      [`--${PREFIX_BS}input-currency-component-symbol-color`]: `var(--${PREFIX_BS}secondary)`,\n      [`--${PREFIX_BS}input-currency-symbol-color`]: `var(--${PREFIX_BS}input-currency-component-symbol-color)`\n    };\n  }\n  // eslint-disable-next-line class-methods-use-this\n  generateSymbolStyleVariables() {\n    return {\n      color: `var(--${PREFIX_BS}m-input-currency-symbol-color)`\n    };\n  }\n  render() {\n    return h(\"d-input\", {\n      ref: el => this.htmlInput = el,\n      style: this.generateStyleVariables(),\n      innerId: this.innerId,\n      name: this.name,\n      label: this.label,\n      labelIcon: this.labelIcon,\n      labelIconFamilyClass: this.labelIconFamilyClass,\n      labelIconFamilyPrefix: this.labelIconFamilyPrefix,\n      placeholder: this.placeholder,\n      value: this.valueAsType(),\n      iconStart: this.iconStart,\n      iconStartFamilyClass: this.iconStartFamilyClass,\n      iconStartFamilyPrefix: this.iconStartFamilyPrefix,\n      iconEnd: this.iconEnd,\n      iconEndFamilyClass: this.iconEndFamilyClass,\n      iconEndFamilyPrefix: this.iconEndFamilyPrefix,\n      isDisabled: this.isDisabled,\n      isReadOnly: this.isReadOnly,\n      isLoading: this.isLoading,\n      hint: this.hint,\n      isInvalid: this.isInvalid,\n      isValid: this.isValid,\n      type: this.internalType,\n      innerInputMode: \"decimal\",\n      pattern: \"^[0-9]\",\n      onEventChange: this.changeHandler,\n      onEventBlur: this.blurHandler,\n      onEventFocus: this.focusHandler,\n      onEventWheel: this.wheelHandler\n    }, h(\"span\", {\n      slot: \"input-start\",\n      style: this.generateSymbolStyleVariables()\n    }, this.currencyCode || this.currencyOptions.symbol));\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"watchValueHandler\"]\n    };\n  }\n};\nexport { DInputCurrencyBase as d_input_currency_base };","map":{"version":3,"names":["DInputCurrencyBase","changeHandler","event","stopPropagation","internalValueAsNumber","detail","parseFloat","undefined","internalValueAsFormat","currency_min","Object","assign","currencyOptions","symbol","format","eventChange","emit","blurHandler","internalType","eventBlur","focusHandler","eventFocus","wheelHandler","_a","htmlInput","innerBlur","watchValueHandler","newValue","internalIsInvalid","isValidValue","value","minValue","maxValue","valueAsType","connectedCallback","componentDidLoad","generateStyleVariables","PREFIX_BS","generateSymbolStyleVariables","color","render","h","ref","el","style","innerId","name","label","labelIcon","labelIconFamilyClass","labelIconFamilyPrefix","placeholder","iconStart","iconStartFamilyClass","iconStartFamilyPrefix","iconEnd","iconEndFamilyClass","iconEndFamilyPrefix","isDisabled","isReadOnly","isLoading","hint","isInvalid","isValid","type","innerInputMode","pattern","onEventChange","onEventBlur","onEventFocus","onEventWheel","slot","currencyCode"],"sources":["/Users/felipemeyer/sites/bim/bim-historial-fideicomisos/node_modules/@dynamic-framework/ui/dist/esm/src/components/d-input-currency-base/d-input-currency-base.tsx"],"sourcesContent":["import type { ComponentInterface, EventEmitter } from '@stencil/core';\nimport {\n  Component,\n  h,\n  Prop,\n  Event,\n  Watch,\n  State,\n} from '@stencil/core';\nimport currency from 'currency.js';\nimport type { Options } from 'currency.js';\n\nimport { PREFIX_BS } from '../../utils';\n\n@Component({ tag: 'd-input-currency-base' })\nexport class DInputCurrencyBase implements ComponentInterface {\n  /**\n   * The id of the input\n   */\n  @Prop() innerId!: string;\n\n  /**\n   * The name of the input\n   */\n  @Prop() name?: string;\n\n  /**\n   * The label text\n   */\n  @Prop() label = '';\n\n  /**\n   * Icon for the label text\n   */\n  @Prop() labelIcon?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyClass?: string;\n\n  /**\n   * Icon label family class\n   */\n  @Prop() labelIconFamilyPrefix?: string;\n\n  /**\n   * Placeholder for the input\n   */\n  @Prop() placeholder?: string = '';\n\n  /**\n   * The value of the input\n   */\n  @Prop() value?: number;\n\n  /**\n   * The input is disabled\n   */\n  @Prop() isDisabled = false;\n\n  /**\n   * Flag to read only the input\n   */\n  @Prop() isReadOnly = false;\n\n  /**\n   * Flag for loading state.\n   */\n  @Prop() isLoading = false;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconFamilyPrefix?: string;\n\n  /**\n   * Icon for the left\n   * */\n  @Prop() iconStart?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyClass?: string;\n\n  /**\n   * Left icon family class\n   */\n  @Prop() iconStartFamilyPrefix?: string;\n\n  /**\n   * Icon for the end\n   * */\n  @Prop() iconEnd?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyClass?: string;\n\n  /**\n   * Right icon family class\n   */\n  @Prop() iconEndFamilyPrefix?: string;\n\n  /**\n   * Hint to display\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Add is-invalid class\n   */\n  @Prop() isInvalid = false;\n\n  /**\n   * Add is-valid class\n   */\n  @Prop() isValid = false;\n\n  /**\n   * * The min value of the input\n  */\n  @Prop() minValue?: number;\n\n  /**\n   * * The max value of the input\n  */\n  @Prop() maxValue?: number;\n\n  /**\n   * Options for the d-input-currency-base\n   */\n  @Prop() currencyOptions!: Options;\n\n  /**\n   * Currency code\n   */\n  @Prop() currencyCode?: string;\n\n  /**\n   * Emitted when the inputs change\n   */\n  @Event() eventChange!: EventEmitter<number>;\n\n  /**\n   * Emitted when the inputs bur\n   */\n  @Event() eventBlur!: EventEmitter<number>;\n\n  /**\n   * Emitted when the inputs focus\n   */\n  @Event() eventFocus!: EventEmitter<number>;\n\n  @State() internalValueAsNumber?: number;\n\n  @State() internalValueAsFormat?: string;\n\n  @State() internalType: 'text' | 'number' = 'text';\n\n  @State() internalIsInvalid = false;\n\n  @Watch('value')\n  watchValueHandler(newValue: number) {\n    this.internalIsInvalid = !this.isValidValue(newValue);\n  }\n\n  /**\n   * HTML d-input element\n   */\n  private htmlInput?: HTMLDInputElement;\n\n  /**\n   * Emit input and select values when the values change\n   */\n  private changeHandler = (event: CustomEvent<string | number>) => {\n    event.stopPropagation();\n    this.internalValueAsNumber = (event.detail !== '' && typeof event.detail === 'string')\n      ? parseFloat(event.detail)\n      : undefined;\n    this.internalValueAsFormat = this.internalValueAsNumber !== undefined\n      ? currency(this.internalValueAsNumber, { ...this.currencyOptions, symbol: '' }).format()\n      : '';\n    this.eventChange.emit(this.internalValueAsNumber);\n  };\n\n  private blurHandler = (event: CustomEvent) => {\n    event.stopPropagation();\n    this.internalType = 'text';\n\n    this.internalValueAsFormat = this.internalValueAsNumber !== undefined\n      ? currency(this.internalValueAsNumber, { ...this.currencyOptions, symbol: '' }).format()\n      : '';\n    this.eventBlur.emit(this.internalValueAsNumber);\n  };\n\n  private focusHandler = (event: CustomEvent) => {\n    event.stopPropagation();\n    this.internalType = 'number';\n    this.internalValueAsFormat = this.internalValueAsNumber !== undefined\n      ? currency(this.internalValueAsNumber, { ...this.currencyOptions, symbol: '' }).format()\n      : '';\n    this.eventFocus.emit(this.internalValueAsNumber);\n  };\n\n  private wheelHandler = (event: CustomEvent) => {\n    event.stopPropagation();\n    this.htmlInput?.innerBlur();\n  };\n\n  private isValidValue(value?: number): boolean {\n    if (value === undefined) {\n      return true;\n    }\n\n    if (this.internalType === 'number') {\n      return (\n        (this.minValue !== undefined ? value >= this.minValue : true)\n        && (this.maxValue !== undefined ? value <= this.maxValue : true)\n      );\n    }\n\n    return true;\n  }\n\n  private valueAsType() {\n    if (this.internalType === 'number') {\n      return this.internalValueAsNumber;\n    }\n\n    return this.internalValueAsFormat;\n  }\n\n  connectedCallback() {\n    this.internalValueAsNumber = this.value;\n  }\n\n  componentDidLoad() {\n    this.internalType = 'text';\n    this.internalValueAsFormat = (this.internalValueAsNumber !== undefined)\n      ? currency(this.internalValueAsNumber, { ...this.currencyOptions, symbol: '' }).format()\n      : '';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private generateStyleVariables() {\n    return {\n      [`--${PREFIX_BS}input-currency-component-symbol-color`]: `var(--${PREFIX_BS}secondary)`,\n      [`--${PREFIX_BS}input-currency-symbol-color`]: `var(--${PREFIX_BS}input-currency-component-symbol-color)`,\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private generateSymbolStyleVariables() {\n    return { color: `var(--${PREFIX_BS}m-input-currency-symbol-color)` };\n  }\n\n  render() {\n    return (\n      <d-input// eslint-disable-next-line no-return-assign\n        ref={(el) => (this.htmlInput = el)}\n        style={this.generateStyleVariables()}\n        innerId={this.innerId}\n        name={this.name}\n        label={this.label}\n        labelIcon={this.labelIcon}\n        labelIconFamilyClass={this.labelIconFamilyClass}\n        labelIconFamilyPrefix={this.labelIconFamilyPrefix}\n        placeholder={this.placeholder}\n        value={this.valueAsType()}\n        iconStart={this.iconStart}\n        iconStartFamilyClass={this.iconStartFamilyClass}\n        iconStartFamilyPrefix={this.iconStartFamilyPrefix}\n        iconEnd={this.iconEnd}\n        iconEndFamilyClass={this.iconEndFamilyClass}\n        iconEndFamilyPrefix={this.iconEndFamilyPrefix}\n        isDisabled={this.isDisabled}\n        isReadOnly={this.isReadOnly}\n        isLoading={this.isLoading}\n        hint={this.hint}\n        isInvalid={this.isInvalid}\n        isValid={this.isValid}\n        type={this.internalType}\n        innerInputMode=\"decimal\"\n        pattern=\"^[0-9]\"\n        onEventChange={this.changeHandler}\n        onEventBlur={this.blurHandler}\n        onEventFocus={this.focusHandler}\n        onEventWheel={this.wheelHandler}\n      >\n        <span\n          slot=\"input-start\"\n          style={this.generateSymbolStyleVariables()}\n        >\n          {this.currencyCode || this.currencyOptions.symbol}\n        </span>\n      </d-input>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}