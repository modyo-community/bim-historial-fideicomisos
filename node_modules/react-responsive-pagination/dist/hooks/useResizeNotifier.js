import { useLayoutEffect, useRef } from 'react';
export function useResizeNotifier(element, callback) {
    const callBackRef = useRef(callback);
    useLayoutEffect(() => {
        callBackRef.current = callback;
    }, [callback]);
    useLayoutEffect(() => {
        if (!element)
            return;
        const resizeObserver = new ResizeObserver(withResizeLoopDetection(() => {
            callBackRef.current();
        }));
        resizeObserver.observe(element);
        return () => {
            resizeObserver.disconnect();
        };
    }, [element]);
}
function withResizeLoopDetection(callback) {
    return (entries, resizeObserver) => {
        const elements = entries.map(entry => entry.target);
        const rectsBefore = elements.map(element => element.getBoundingClientRect());
        callback();
        const rectsAfter = elements.map(element => element.getBoundingClientRect());
        const changedElements = elements.filter((_, i) => !areRectSizesEqual(rectsBefore[i], rectsAfter[i]));
        changedElements.forEach(element => unobserveUntilNextFrame(element, resizeObserver));
    };
}
function unobserveUntilNextFrame(element, resizeObserver) {
    resizeObserver.unobserve(element);
    requestAnimationFrame(() => {
        resizeObserver.observe(element);
    });
}
function areRectSizesEqual(rect1, rect2) {
    return rect1.width === rect2.width && rect1.height === rect2.height;
}
