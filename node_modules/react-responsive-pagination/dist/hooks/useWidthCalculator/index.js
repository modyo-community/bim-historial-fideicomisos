import { useState, useCallback, useMemo } from 'react';
import { createWidthCalculator, } from '../../widthCalculator/index.js';
import { getViewMetricsFromContainer } from './getViewMetrics.js';
import { objectUnzip } from '../../helpers/object.js';
export function useWidthCalculator() {
    const [baseMetrics, setBaseMetrics] = useState(null);
    const resetCalculator = useCallback(() => setBaseMetrics(null), []);
    const calculatorResult = useMemo(() => {
        return createWidthCalculator(baseMetrics);
    }, [baseMetrics]);
    if ('requiredBaseMetrics' in calculatorResult) {
        const [itemKeys, items] = objectUnzip(calculatorResult.requiredBaseMetrics);
        return {
            renderNeeded: {
                items,
                ref(containerElement) {
                    if (containerElement) {
                        setBaseMetrics(getViewMetricsFromContainer(containerElement, itemKeys));
                    }
                },
            },
            clearCache: resetCalculator,
        };
    }
    return {
        calculator: calculatorResult,
        clearCache: resetCalculator,
    };
}
