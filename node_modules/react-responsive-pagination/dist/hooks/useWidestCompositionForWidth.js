import { useRef } from 'react';
import { lastWhere, iteratorNext } from '../helpers/iterator.js';
import { useWidthCalculator } from './useWidthCalculator/index.js';
import { useFoutDetector } from './useFoutDetector.js';
export function useWidestCompositionForWidth(narrowToWideCompositionsProvider, maxWidth) {
    const widthCalculator = useWidthCalculator();
    const containerElementRef = useRef(null);
    const clearCache = widthCalculator.clearCache;
    useFoutDetector(() => getItemsDomElements(containerElementRef.current), clearCache);
    if ('renderNeeded' in widthCalculator) {
        return {
            items: widthCalculator.renderNeeded.items,
            ref(containerElement) {
                widthCalculator.renderNeeded.ref(containerElement);
                containerElementRef.current = containerElement;
            },
            clearCache,
        };
    }
    else {
        return {
            items: getLargestFittingCompositionWithFallback(narrowToWideCompositionsProvider, widthCalculator.calculator, maxWidth),
            ref: containerElementRef,
            clearCache,
        };
    }
}
function getLargestFittingCompositionWithFallback(getNarrowToWideCompositions, getCompositionWidth, maxWidth) {
    const narrowToWideCompositions = getNarrowToWideCompositions();
    const firstComposition = iteratorNext(narrowToWideCompositions) ?? [];
    const doesCompositionFit = (composition) => {
        return getCompositionWidth(composition) < maxWidth;
    };
    return lastWhere(narrowToWideCompositions, doesCompositionFit) ?? firstComposition;
}
function getItemsDomElements(viewDomElement) {
    return viewDomElement && Array.from(viewDomElement.children);
}
