import { useCallback, useState } from 'react';
import { setRefValue } from '../helpers/ref.js';
import { useAvailableWidth } from './useAvailableWidth.js';
import { useWidestCompositionForWidth } from './useWidestCompositionForWidth.js';
export function useWidestComposition(narrowToWideCompositionsProvider, maxWidth) {
    const [containerElement, setContainerElement] = useState(null);
    const availableWidth = useAvailableWidth(maxWidth === undefined ? containerElement : null);
    const width = maxWidth ?? availableWidth ?? 0;
    const { items, ref: widestCompositionRef, clearCache, } = useWidestCompositionForWidth(narrowToWideCompositionsProvider, width);
    const ref = useCallback((element) => {
        setRefValue(widestCompositionRef, element);
        setContainerElement(element);
    }, [widestCompositionRef]);
    return {
        items,
        ref,
        clearCache,
    };
}
