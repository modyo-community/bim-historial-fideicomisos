import { useLayoutEffect } from 'react';
import { getWidth } from '../helpers/style.js';
export function useFoutDetector(getElements, handleFout) {
    useLayoutEffect(() => {
        const elements = getElements();
        if (!elements)
            return;
        return setupWidthChangeAfterRenderListener(elements, handleFout);
    });
}
function setupWidthChangeAfterRenderListener(elements, handleWidthChangeAfterRender) {
    const getInitialWidth = createInitialWidthProvider(elements);
    const hasWidthChanged = (element) => {
        return isSignificantDifference(getInitialWidth(element), getWidth(element));
    };
    return setupResizeObserver(elements, maybeResizedElements => {
        if (maybeResizedElements.some(hasWidthChanged)) {
            handleWidthChangeAfterRender();
        }
    });
}
function createInitialWidthProvider(elements) {
    const initialWidths = elements.map(getWidth);
    return function getInitialWidth(element) {
        const index = elements.indexOf(element);
        return initialWidths[index];
    };
}
function setupResizeObserver(elements, handleElementsResized) {
    const resizeObserver = new ResizeObserver((entries) => {
        const elements = entries.map(getTargetElement);
        handleElementsResized(elements);
    });
    elements.forEach(element => resizeObserver.observe(element));
    return () => resizeObserver.disconnect();
}
function getTargetElement(entry) {
    return entry.target;
}
function isSignificantDifference(width1, width2) {
    return Math.abs(width1 - width2) > 0.5;
}
