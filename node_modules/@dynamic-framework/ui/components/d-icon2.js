import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { P as PREFIX_BS, b as state } from './component-config.js';

const DIcon = /*@__PURE__*/ proxyCustomElement(class DIcon extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.icon = undefined;
    this.theme = undefined;
    this.innerClass = undefined;
    this.size = '1.5rem';
    this.isLoading = false;
    this.loadingDuration = 1.8;
    this.hasCircle = false;
    this.circleSize = `calc(var(--${PREFIX_BS}icon-component-size) * 1)`;
    this.color = undefined;
    this.backgroundColor = undefined;
    this.familyClass = state.iconFamilyClass;
    this.familyPrefix = state.iconFamilyPrefix;
  }
  getColorStyle() {
    if (this.color) {
      return { [`--${PREFIX_BS}icon-component-color`]: this.color };
    }
    if (this.theme) {
      return { [`--${PREFIX_BS}icon-component-color`]: `var(--${PREFIX_BS}${this.theme})` };
    }
    return {};
  }
  getBackgroundStyle() {
    if (this.backgroundColor) {
      return { [`--${PREFIX_BS}icon-component-bg-color`]: this.backgroundColor };
    }
    if (this.hasCircle) {
      if (this.theme) {
        return { [`--${PREFIX_BS}icon-component-bg-color`]: `rgba(var(--${PREFIX_BS}${this.theme}-rgb), 0.1)` };
      }
      return { [`--${PREFIX_BS}icon-component-bg-color`]: `rgba(var(--${PREFIX_BS}body-color-rgb), 0.1)` };
    }
    return {};
  }
  getCircleSizeStyle() {
    if (this.hasCircle) {
      return { [`--${PREFIX_BS}icon-component-padding`]: this.circleSize };
    }
    return { [`--${PREFIX_BS}icon-component-padding`]: '0' };
  }
  generateStyleVariables() {
    return Object.assign(Object.assign(Object.assign({ [`--${PREFIX_BS}icon-component-size`]: this.size, [`--${PREFIX_BS}icon-component-loading-duration`]: `${this.loadingDuration}s` }, this.getColorStyle()), this.getBackgroundStyle()), this.getCircleSizeStyle());
  }
  generateClasses() {
    return {
      'd-icon': true,
      [`${this.innerClass}`]: !!this.innerClass,
      [this.familyClass || state.iconFamilyClass]: true,
      [`${this.familyPrefix || state.iconFamilyPrefix}${this.icon}`]: true,
      'd-icon-loading': this.isLoading,
    };
  }
  render() {
    return (h("i", { class: this.generateClasses(), style: this.generateStyleVariables() }));
  }
}, [0, "d-icon", {
    "icon": [1],
    "theme": [1],
    "innerClass": [1, "inner-class"],
    "size": [1],
    "isLoading": [4, "is-loading"],
    "loadingDuration": [2, "loading-duration"],
    "hasCircle": [4, "has-circle"],
    "circleSize": [1, "circle-size"],
    "color": [1],
    "backgroundColor": [1, "background-color"],
    "familyClass": [1, "family-class"],
    "familyPrefix": [1, "family-prefix"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["d-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "d-icon":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DIcon);
      }
      break;
  } });
}

export { DIcon as D, defineCustomElement as d };

//# sourceMappingURL=d-icon2.js.map