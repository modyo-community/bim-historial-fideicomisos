import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$3 } from './d-icon2.js';
import { d as defineCustomElement$2 } from './d-input2.js';

const DInputPassword$1 = /*@__PURE__*/ proxyCustomElement(class DInputPassword extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.eventChange = createEvent(this, "eventChange", 7);
    this.changeHandler = () => {
      var _a;
      this.eventChange.emit((_a = this.htmlInput) === null || _a === void 0 ? void 0 : _a.value.toString());
    };
    this.visibilityHandler = () => {
      this.visible = !this.visible;
    };
    this.innerId = undefined;
    this.name = undefined;
    this.label = '';
    this.labelIcon = undefined;
    this.labelIconFamilyClass = undefined;
    this.labelIconFamilyPrefix = undefined;
    this.placeholder = '';
    this.value = '';
    this.isDisabled = false;
    this.isReadOnly = false;
    this.isLoading = false;
    this.hint = undefined;
    this.isInvalid = false;
    this.isValid = false;
    this.visible = false;
  }
  render() {
    return (h("d-input", {
      // eslint-disable-next-line no-return-assign
      ref: (el) => (this.htmlInput = el), innerId: this.innerId, name: this.name, label: this.label, labelIcon: this.labelIcon, labelIconFamilyClass: this.labelIconFamilyClass, labelIconFamilyPrefix: this.labelIconFamilyPrefix, placeholder: this.placeholder, value: this.value, iconEnd: !this.visible ? 'eye-slash' : 'eye', type: !this.visible ? 'password' : 'text', isDisabled: this.isDisabled, isReadOnly: this.isReadOnly, isLoading: this.isLoading, hint: this.hint, isInvalid: this.isInvalid, isValid: this.isValid, onEventChange: this.changeHandler, onEventIconEndClick: this.visibilityHandler
    }));
  }
}, [0, "d-input-password", {
    "innerId": [1, "inner-id"],
    "name": [1],
    "label": [1],
    "labelIcon": [1, "label-icon"],
    "labelIconFamilyClass": [1, "label-icon-family-class"],
    "labelIconFamilyPrefix": [1, "label-icon-family-prefix"],
    "placeholder": [1],
    "value": [1],
    "isDisabled": [4, "is-disabled"],
    "isReadOnly": [4, "is-read-only"],
    "isLoading": [4, "is-loading"],
    "hint": [1],
    "isInvalid": [4, "is-invalid"],
    "isValid": [4, "is-valid"],
    "visible": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["d-input-password", "d-icon", "d-input"];
  components.forEach(tagName => { switch (tagName) {
    case "d-input-password":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DInputPassword$1);
      }
      break;
    case "d-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "d-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DInputPassword = DInputPassword$1;
const defineCustomElement = defineCustomElement$1;

export { DInputPassword, defineCustomElement };

//# sourceMappingURL=d-input-password.js.map