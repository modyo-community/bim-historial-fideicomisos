import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { P as PREFIX_BS } from './component-config.js';
import { d as defineCustomElement$1 } from './d-icon2.js';

const DButton = /*@__PURE__*/ proxyCustomElement(class DButton extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.eventClick = createEvent(this, "eventClick", 3);
    this.clickHandler = (event) => {
      if (this.isStopPropagationEnabled) {
        event.stopPropagation();
      }
      this.eventClick.emit();
    };
    this.theme = 'primary';
    this.size = undefined;
    this.variant = undefined;
    this.state = undefined;
    this.text = '';
    this.iconStart = undefined;
    this.iconStartFamilyClass = undefined;
    this.iconStartFamilyPrefix = undefined;
    this.iconEnd = undefined;
    this.iconEndFamilyClass = undefined;
    this.iconEndFamilyPrefix = undefined;
    this.value = undefined;
    this.type = 'button';
    this.isPill = false;
    this.isLoading = false;
    this.isDisabled = false;
    this.isStopPropagationEnabled = true;
  }
  generateStyleVariables() {
    if (this.isPill) {
      return {
        [`--${PREFIX_BS}btn-component-border-radius`]: `var(--${PREFIX_BS}border-radius-pill)`,
        [`--${PREFIX_BS}btn-component-lg-border-radius`]: `var(--${PREFIX_BS}border-radius-pill)`,
        [`--${PREFIX_BS}btn-component-sm-border-radius`]: `var(--${PREFIX_BS}border-radius-pill)`,
      };
    }
    return {};
  }
  generateClasses() {
    const variantClass = this.variant
      ? `btn-${this.variant}-${this.theme}`
      : `btn-${this.theme}`;
    return Object.assign(Object.assign({ btn: true, [variantClass]: true, [`btn-${this.size}`]: !!this.size }, (this.state && this.state !== 'disabled') && { [this.state]: true }), { loading: this.isLoading });
  }
  render() {
    return (h("button", Object.assign({ class: this.generateClasses(), style: this.generateStyleVariables(), type: this.type, disabled: this.state === 'disabled' || this.isLoading || this.isDisabled }, this.value && { value: this.value }, { onClick: this.clickHandler }), this.iconStart && (h("d-icon", { icon: this.iconStart, familyClass: this.iconStartFamilyClass, familyPrefix: this.iconStartFamilyPrefix })), (this.text && !this.isLoading) && (h("span", null, this.text)), this.isLoading && (h("span", { class: "spinner-border spinner-border-sm", role: "status", "aria-hidden": "true" }, h("span", { class: "visually-hidden" }, "Loading..."))), (this.iconEnd) && (h("d-icon", { icon: this.iconEnd, familyClass: this.iconEndFamilyClass, familyPrefix: this.iconEndFamilyPrefix }))));
  }
}, [0, "d-button", {
    "theme": [1],
    "size": [1],
    "variant": [1],
    "state": [1],
    "text": [1],
    "iconStart": [1, "icon-start"],
    "iconStartFamilyClass": [1, "icon-start-family-class"],
    "iconStartFamilyPrefix": [1, "icon-start-family-prefix"],
    "iconEnd": [1, "icon-end"],
    "iconEndFamilyClass": [1, "icon-end-family-class"],
    "iconEndFamilyPrefix": [1, "icon-end-family-prefix"],
    "value": [1],
    "type": [1],
    "isPill": [4, "is-pill"],
    "isLoading": [4, "is-loading"],
    "isDisabled": [4, "is-disabled"],
    "isStopPropagationEnabled": [4, "is-stop-propagation-enabled"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["d-button", "d-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "d-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DButton);
      }
      break;
    case "d-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DButton as D, defineCustomElement as d };

//# sourceMappingURL=d-button2.js.map