import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { P as PREFIX_BS } from './component-config.js';
import { d as defineCustomElement$3 } from './d-icon2.js';
import { d as defineCustomElement$2 } from './d-input2.js';

const DInputCounter$1 = /*@__PURE__*/ proxyCustomElement(class DInputCounter extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.eventChange = createEvent(this, "eventChange", 7);
    this.eventClick = createEvent(this, "eventClick", 7);
    this.changeHandler = (event) => {
      event.stopPropagation();
      this.internalValue = (event.detail !== '' && typeof event.detail === 'string')
        ? parseInt(event.detail, 10)
        : 0;
      this.eventChange.emit(this.internalValue);
    };
    this.clickHandler = (action) => {
      const currentValue = this.internalValue;
      if (action) {
        const temp = Number(currentValue) + 1;
        this.internalValue = temp <= this.maxValue ? temp : this.maxValue;
      }
      else {
        const temp = Number(currentValue) - 1;
        this.internalValue = temp >= this.minValue ? temp : this.minValue;
      }
      this.eventClick.emit(this.internalValue);
    };
    this.innerId = undefined;
    this.name = undefined;
    this.label = '';
    this.labelIcon = undefined;
    this.labelIconFamilyClass = undefined;
    this.labelIconFamilyPrefix = undefined;
    this.value = undefined;
    this.isDisabled = false;
    this.isReadOnly = false;
    this.isLoading = false;
    this.iconFamilyClass = undefined;
    this.iconFamilyPrefix = undefined;
    this.iconStart = 'dash-square';
    this.iconStartFamilyClass = undefined;
    this.iconStartFamilyPrefix = undefined;
    this.iconEnd = 'plus-square';
    this.iconEndFamilyClass = undefined;
    this.iconEndFamilyPrefix = undefined;
    this.hint = undefined;
    this.isInvalid = false;
    this.isValid = false;
    this.minValue = undefined;
    this.maxValue = undefined;
    this.internalIsInvalid = false;
    this.internalValue = 0;
  }
  watchValidValueHandler() {
    this.internalIsInvalid = !(this.internalValue >= this.minValue
      && this.internalValue <= this.maxValue);
  }
  watchValueHandler() {
    this.internalValue = this.value;
  }
  connectedCallback() {
    this.internalValue = this.value;
  }
  // eslint-disable-next-line class-methods-use-this
  generateStyleVariables() {
    return { [`--${PREFIX_BS}input-component-form-control-text-align`]: 'center' };
  }
  render() {
    return (h("d-input", { style: this.generateStyleVariables(), innerId: this.innerId, name: this.name, label: this.label, labelIcon: this.labelIcon, labelIconFamilyClass: this.labelIconFamilyClass, labelIconFamilyPrefix: this.labelIconFamilyPrefix, value: this.internalValue, iconStart: this.iconStart, iconStartFamilyClass: this.iconStartFamilyClass, iconStartFamilyPrefix: this.iconStartFamilyPrefix, iconEnd: this.iconEnd, iconEndFamilyClass: this.iconStartFamilyClass, iconEndFamilyPrefix: this.iconStartFamilyPrefix, isDisabled: this.isDisabled, isReadOnly: this.isReadOnly, isLoading: this.isLoading, hint: this.hint, isInvalid: this.internalIsInvalid || this.isInvalid, isValid: this.isValid, type: "number", onEventChange: this.changeHandler, onEventIconStartClick: (event) => {
        event.stopPropagation();
        this.clickHandler(false);
      }, onEventIconEndClick: (event) => {
        event.stopPropagation();
        this.clickHandler(true);
      } }));
  }
  static get watchers() { return {
    "internalValue": ["watchValidValueHandler"],
    "value": ["watchValueHandler"]
  }; }
}, [0, "d-input-counter", {
    "innerId": [1, "inner-id"],
    "name": [1],
    "label": [1],
    "labelIcon": [1, "label-icon"],
    "labelIconFamilyClass": [1, "label-icon-family-class"],
    "labelIconFamilyPrefix": [1, "label-icon-family-prefix"],
    "value": [2],
    "isDisabled": [4, "is-disabled"],
    "isReadOnly": [4, "is-read-only"],
    "isLoading": [4, "is-loading"],
    "iconFamilyClass": [1, "icon-family-class"],
    "iconFamilyPrefix": [1, "icon-family-prefix"],
    "iconStart": [1, "icon-start"],
    "iconStartFamilyClass": [1, "icon-start-family-class"],
    "iconStartFamilyPrefix": [1, "icon-start-family-prefix"],
    "iconEnd": [1, "icon-end"],
    "iconEndFamilyClass": [1, "icon-end-family-class"],
    "iconEndFamilyPrefix": [1, "icon-end-family-prefix"],
    "hint": [1],
    "isInvalid": [4, "is-invalid"],
    "isValid": [4, "is-valid"],
    "minValue": [2, "min-value"],
    "maxValue": [2, "max-value"],
    "internalIsInvalid": [32],
    "internalValue": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["d-input-counter", "d-icon", "d-input"];
  components.forEach(tagName => { switch (tagName) {
    case "d-input-counter":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DInputCounter$1);
      }
      break;
    case "d-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "d-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DInputCounter = DInputCounter$1;
const defineCustomElement = defineCustomElement$1;

export { DInputCounter, defineCustomElement };

//# sourceMappingURL=d-input-counter.js.map