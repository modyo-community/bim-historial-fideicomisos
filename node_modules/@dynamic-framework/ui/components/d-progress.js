import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const DProgress$1 = /*@__PURE__*/ proxyCustomElement(class DProgress extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.currentValue = undefined;
    this.minValue = 0;
    this.maxValue = 100;
    this.hideCurrentValue = false;
    this.enableStripedAnimation = false;
  }
  formatProgress() {
    return `${this.currentValue}%`;
  }
  generateClasses() {
    return {
      'progress-bar': true,
      'progress-bar-striped progress-bar-animated': this.enableStripedAnimation,
    };
  }
  render() {
    return (h("div", { class: "progress" }, h("div", { class: this.generateClasses(), role: "progressbar", "aria-label": "Progress bar", style: { width: `${this.currentValue}%` }, "aria-valuenow": this.currentValue, "aria-valuemin": this.minValue, "aria-valuemax": this.maxValue }, !this.hideCurrentValue && this.formatProgress())));
  }
}, [0, "d-progress", {
    "currentValue": [2, "current-value"],
    "minValue": [2, "min-value"],
    "maxValue": [2, "max-value"],
    "hideCurrentValue": [4, "hide-current-value"],
    "enableStripedAnimation": [4, "enable-striped-animation"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["d-progress"];
  components.forEach(tagName => { switch (tagName) {
    case "d-progress":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DProgress$1);
      }
      break;
  } });
}

const DProgress = DProgress$1;
const defineCustomElement = defineCustomElement$1;

export { DProgress, defineCustomElement };

//# sourceMappingURL=d-progress.js.map