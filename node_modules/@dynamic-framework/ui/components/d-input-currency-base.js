import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { c as currency_min, P as PREFIX_BS } from './component-config.js';
import { d as defineCustomElement$3 } from './d-icon2.js';
import { d as defineCustomElement$2 } from './d-input2.js';

const DInputCurrencyBase$1 = /*@__PURE__*/ proxyCustomElement(class DInputCurrencyBase extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.eventChange = createEvent(this, "eventChange", 7);
    this.eventBlur = createEvent(this, "eventBlur", 7);
    this.eventFocus = createEvent(this, "eventFocus", 7);
    /**
     * Emit input and select values when the values change
     */
    this.changeHandler = (event) => {
      event.stopPropagation();
      this.internalValueAsNumber = (event.detail !== '' && typeof event.detail === 'string')
        ? parseFloat(event.detail)
        : undefined;
      this.internalValueAsFormat = this.internalValueAsNumber !== undefined
        ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), { symbol: '' })).format()
        : '';
      this.eventChange.emit(this.internalValueAsNumber);
    };
    this.blurHandler = (event) => {
      event.stopPropagation();
      this.internalType = 'text';
      this.internalValueAsFormat = this.internalValueAsNumber !== undefined
        ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), { symbol: '' })).format()
        : '';
      this.eventBlur.emit(this.internalValueAsNumber);
    };
    this.focusHandler = (event) => {
      event.stopPropagation();
      this.internalType = 'number';
      this.internalValueAsFormat = this.internalValueAsNumber !== undefined
        ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), { symbol: '' })).format()
        : '';
      this.eventFocus.emit(this.internalValueAsNumber);
    };
    this.wheelHandler = (event) => {
      var _a;
      event.stopPropagation();
      (_a = this.htmlInput) === null || _a === void 0 ? void 0 : _a.innerBlur();
    };
    this.innerId = undefined;
    this.name = undefined;
    this.label = '';
    this.labelIcon = undefined;
    this.labelIconFamilyClass = undefined;
    this.labelIconFamilyPrefix = undefined;
    this.placeholder = '';
    this.value = undefined;
    this.isDisabled = false;
    this.isReadOnly = false;
    this.isLoading = false;
    this.iconFamilyClass = undefined;
    this.iconFamilyPrefix = undefined;
    this.iconStart = undefined;
    this.iconStartFamilyClass = undefined;
    this.iconStartFamilyPrefix = undefined;
    this.iconEnd = undefined;
    this.iconEndFamilyClass = undefined;
    this.iconEndFamilyPrefix = undefined;
    this.hint = undefined;
    this.isInvalid = false;
    this.isValid = false;
    this.minValue = undefined;
    this.maxValue = undefined;
    this.currencyOptions = undefined;
    this.currencyCode = undefined;
    this.internalValueAsNumber = undefined;
    this.internalValueAsFormat = undefined;
    this.internalType = 'text';
    this.internalIsInvalid = false;
  }
  watchValueHandler(newValue) {
    this.internalIsInvalid = !this.isValidValue(newValue);
  }
  isValidValue(value) {
    if (value === undefined) {
      return true;
    }
    if (this.internalType === 'number') {
      return ((this.minValue !== undefined ? value >= this.minValue : true)
        && (this.maxValue !== undefined ? value <= this.maxValue : true));
    }
    return true;
  }
  valueAsType() {
    if (this.internalType === 'number') {
      return this.internalValueAsNumber;
    }
    return this.internalValueAsFormat;
  }
  connectedCallback() {
    this.internalValueAsNumber = this.value;
  }
  componentDidLoad() {
    this.internalType = 'text';
    this.internalValueAsFormat = (this.internalValueAsNumber !== undefined)
      ? currency_min(this.internalValueAsNumber, Object.assign(Object.assign({}, this.currencyOptions), { symbol: '' })).format()
      : '';
  }
  // eslint-disable-next-line class-methods-use-this
  generateStyleVariables() {
    return {
      [`--${PREFIX_BS}input-currency-component-symbol-color`]: `var(--${PREFIX_BS}secondary)`,
      [`--${PREFIX_BS}input-currency-symbol-color`]: `var(--${PREFIX_BS}input-currency-component-symbol-color)`,
    };
  }
  // eslint-disable-next-line class-methods-use-this
  generateSymbolStyleVariables() {
    return { color: `var(--${PREFIX_BS}m-input-currency-symbol-color)` };
  }
  render() {
    return (h("d-input", { ref: (el) => (this.htmlInput = el), style: this.generateStyleVariables(), innerId: this.innerId, name: this.name, label: this.label, labelIcon: this.labelIcon, labelIconFamilyClass: this.labelIconFamilyClass, labelIconFamilyPrefix: this.labelIconFamilyPrefix, placeholder: this.placeholder, value: this.valueAsType(), iconStart: this.iconStart, iconStartFamilyClass: this.iconStartFamilyClass, iconStartFamilyPrefix: this.iconStartFamilyPrefix, iconEnd: this.iconEnd, iconEndFamilyClass: this.iconEndFamilyClass, iconEndFamilyPrefix: this.iconEndFamilyPrefix, isDisabled: this.isDisabled, isReadOnly: this.isReadOnly, isLoading: this.isLoading, hint: this.hint, isInvalid: this.isInvalid, isValid: this.isValid, type: this.internalType, innerInputMode: "decimal", pattern: "^[0-9]", onEventChange: this.changeHandler, onEventBlur: this.blurHandler, onEventFocus: this.focusHandler, onEventWheel: this.wheelHandler }, h("span", { slot: "input-start", style: this.generateSymbolStyleVariables() }, this.currencyCode || this.currencyOptions.symbol)));
  }
  static get watchers() { return {
    "value": ["watchValueHandler"]
  }; }
}, [0, "d-input-currency-base", {
    "innerId": [1, "inner-id"],
    "name": [1],
    "label": [1],
    "labelIcon": [1, "label-icon"],
    "labelIconFamilyClass": [1, "label-icon-family-class"],
    "labelIconFamilyPrefix": [1, "label-icon-family-prefix"],
    "placeholder": [1],
    "value": [2],
    "isDisabled": [4, "is-disabled"],
    "isReadOnly": [4, "is-read-only"],
    "isLoading": [4, "is-loading"],
    "iconFamilyClass": [1, "icon-family-class"],
    "iconFamilyPrefix": [1, "icon-family-prefix"],
    "iconStart": [1, "icon-start"],
    "iconStartFamilyClass": [1, "icon-start-family-class"],
    "iconStartFamilyPrefix": [1, "icon-start-family-prefix"],
    "iconEnd": [1, "icon-end"],
    "iconEndFamilyClass": [1, "icon-end-family-class"],
    "iconEndFamilyPrefix": [1, "icon-end-family-prefix"],
    "hint": [1],
    "isInvalid": [4, "is-invalid"],
    "isValid": [4, "is-valid"],
    "minValue": [2, "min-value"],
    "maxValue": [2, "max-value"],
    "currencyOptions": [16],
    "currencyCode": [1, "currency-code"],
    "internalValueAsNumber": [32],
    "internalValueAsFormat": [32],
    "internalType": [32],
    "internalIsInvalid": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["d-input-currency-base", "d-icon", "d-input"];
  components.forEach(tagName => { switch (tagName) {
    case "d-input-currency-base":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DInputCurrencyBase$1);
      }
      break;
    case "d-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "d-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DInputCurrencyBase = DInputCurrencyBase$1;
const defineCustomElement = defineCustomElement$1;

export { DInputCurrencyBase, defineCustomElement };

//# sourceMappingURL=d-input-currency-base.js.map