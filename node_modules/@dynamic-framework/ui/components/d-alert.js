import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { P as PREFIX_BS } from './component-config.js';
import { d as defineCustomElement$2 } from './d-icon2.js';

const ALERT_TYPE_ICON = {
  warning: 'exclamation-circle',
  danger: 'exclamation-triangle',
  success: 'check-circle',
  info: 'info-circle',
  light: 'info-circle',
  dark: 'info-circle',
};

const DAlert$1 = /*@__PURE__*/ proxyCustomElement(class DAlert extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.eventClose = createEvent(this, "eventClose", 7);
    this.clickHandler = () => {
      this.eventClose.emit();
    };
    this.type = 'light';
    this.icon = undefined;
    this.iconFamilyClass = undefined;
    this.iconFamilyPrefix = undefined;
    this.showIcon = false;
    this.showClose = undefined;
  }
  generateClasses() {
    return {
      [`alert alert-${this.type}`]: true,
      'fade show': !!this.showClose,
    };
  }
  getIcon() {
    return this.icon || ALERT_TYPE_ICON[this.type] || '';
  }
  generateStyleVariables() {
    return Object.assign(Object.assign({}, this.type === 'light' ? { [`--${PREFIX_BS}alert-component-icon-color`]: `var(--${PREFIX_BS}secondary)` } : {}), { [`--${PREFIX_BS}alert-component-separator-opacity`]: '0.3' });
  }
  render() {
    return (h("div", { class: this.generateClasses(), style: this.generateStyleVariables(), role: "alert" }, (this.showIcon || this.icon) && (h("d-icon", { class: "alert-icon", icon: this.getIcon(), familyClass: this.iconFamilyClass, familyPrefix: this.iconFamilyPrefix })), h("div", { class: "alert-text" }, h("slot", null)), this.showClose && (h("div", { class: "alert-separator" })), this.showClose && (h("button", { type: "button", class: "btn-close", "aria-label": "Close", onClick: this.clickHandler }, h("d-icon", { class: "alert-close-icon", icon: "x-lg", familyClass: this.iconFamilyClass, familyPrefix: this.iconFamilyPrefix })))));
  }
}, [4, "d-alert", {
    "type": [1],
    "icon": [1],
    "iconFamilyClass": [1, "icon-family-class"],
    "iconFamilyPrefix": [1, "icon-family-prefix"],
    "showIcon": [4, "show-icon"],
    "showClose": [4, "show-close"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["d-alert", "d-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "d-alert":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DAlert$1);
      }
      break;
    case "d-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DAlert = DAlert$1;
const defineCustomElement = defineCustomElement$1;

export { DAlert, defineCustomElement };

//# sourceMappingURL=d-alert.js.map